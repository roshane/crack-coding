*) Given arrays for N (>= 2) users, each representing the IDs of hotels visited,
 find the common IDs of the hotels visited amongst the users.

Input:
userA = { 2, 3, 1 }
userB = { 2, 5, 3 }
userC = { 7, 3, 1 }

Output:
{3}

Assumptions:
Arrays are unsorted.

Cases:
1) Each array consists of distinct hotel IDs
2) Each array may contain duplicate hotel IDs

Solutions:
1- Sorting and comparing
a- SOrt any two array- O(nlogn)
b- find common of two sorted arrays and insert into the Set O(n)
c- Check for remaing arrays , whther elements of that array is present in the set or not. if yes then it is common element. O(n) for each new array

*set will not be modified after step b.

Time complexity O(nlogn) + O(n) ~= O(nlogn)


2- It can also be dome in O(n) time, by using hashmap and set-
a- Create an hash map of one array and array element as key of the hashmap - O(n)
b- Traverse second array and check in hashmap for every element, if the key is present in hashmap then insert to the set. O(n)
Now you have set of common elements in 2 arrays.
c- Check for remaing arrays , whther elements of that array is present in the set or not. if yes then it is common element. - O(n) for each new array

*set will not be modified after step b.

Time complexity O(n) or O(k*n) ~= O(n) , where k is number of the arrays


*)Consider a hotel where the guest is checked in and check out.
Find a day when the maximum number of guests stay in a hotel.

example:

Input :
[
{check-in : 1, check-out 4},
{check-in : 2, check-out 5},
{check-in : 10, check-out 12},
{check-in : 5, check-out 9},
{check-in : 5, check-out 12}
]

Output : 5


Solutions:
A[] = {1,2,10,5,5} // checkin array
D[] = {4,5,12,9,12} // checkout array

sort(A) // {1,2,5,5,10}
sort(D) // {4,5,9,12,12}

count = 1  // first person checked in
int i = 1; // to traverse A
int j = 0; // to traverse D
int max= 0;
int day = A[i];

while(i < n && j < n) {

	if(A[i] <= D[j]) {
		count++;
		i++;
		if(count > max) {
			max = count ;
			day = A[i];
		}
	} else {
		count--;
		j++;
	}

}

return day;

The time complexity will be O(nlogn).

Explanation is below -

C - checkin
D - checkout
count - number of people at same time in hotel

Day ---- C/D ------ count
1 C 1
2 C 2 // Increase count on checkin
4 D 1 // Decrease count on checkout
5 C 2
5 C 3 // maximum number of people in hotel -- return the day
9 D 2
12 D 1
12 D 0

*) Given number N, Find the least number of perfect square number sum needed to get N.

   Example :
   n=5 (4+1) i.e. 2
   n=7 (4+1+1+1) i.e. 4
   n=12 (4+4+4) i.e 3
   n=20 (16+4) i.e. 2

Solutions:
   public class MinimumCoin {

   	public static int findMin(int[] prfct, int k) {

   		int[] arr = new int[k + 1];
   		arr[0] = 0;

   		for (int i = 1; i < arr.length; i++) {
   			arr[i] = Integer.MAX_VALUE;
   			for (int j = 0; j < prfct.length; j++) {

   				if (prfct[j] <= i) {
   					int temp = arr[i - prfct[j]] + 1;
   					arr[i] = arr[i] > temp ? temp : arr[i] ;

   				}
   			}
   		}



   		return arr[k];

   	}

   	public static int[] buildArray(int N) {
   		int l = (int) Math.sqrt(N);
   		int[] prfct = new int[l];

   		//System.out.println(prfct.length);
   		for(int i=1;i<=l;i++) {
   			prfct[i-1] = i*i;
   		}


   		return prfct;
   	}

   	public static void main(String[] args) {
   		int N = 20;
   		int[] prfct = buildArray(N); // Build the perfect square array

   		int output = findMin(prfct, N); // find  the minimum using Dynamic programming approach

   		System.out.println(output);
   	}

   }

*) Given a stream of characters (e.g. acacabcatghhellomvnsdb) and a list of words
(e.g. ["aca","cat","hello","world"] ) find and display count of each and every word
 once the stream ends.(Like : "aca" : 2 , "cat" : 1 , "hello" : 1 , "world" : 0 ).


*) Write a function to test if the given set of brackets are balanced or not. e.g. {{}}{)([][]

*) There's a very simple compression algorithm that takes subsequent characters and just emits
 how often they were seen.

   Example:
   abababaabbbaaaaa

*) $a = [3, 1, 4, 5, 19, 6];


   $b = [14, 9, 22, 36, 8, 0, 64, 25];

   # Some elements in the second array are squares.
   # Print elements that have a square root existing in the first array.
   # $b[1] = 9, it’s square root is 3 ($a[0])
   # $b[3] = 36, it’s square root is 6 ($a[5])
   # $b[7] = 25, it’s square root is 5 ($a[3])

   # Result:
   # 9
   # 36
   # 25

*) A multiset or a bag is a collection of elements that can be repeated. Contrast with a set, where elements cannot be repeated.
   Multisets can be intersected just like sets can be intersected.

   Input :

   A = [0,1,1,2,2,5]
   B = [0,1,2,2,2,6]

   Output :
   A ∩ B = C = [0,1,2,2]

   Input :
   A = [0,1,1]
   B = [0,1,2,3,4,5,6]

   Output
   A ∩ B = C = [0,1]

   Write a function to find the intersection of two integer arrays in that way ?

Solutions:
public class retainex {

public static void main(String[] args) {
int a[]={1,2,3,4,5,6};
int b[]={4,5,6,7,8,9};
TreeSet<Integer> tr1=new TreeSet<Integer>();
TreeSet<Integer> tr2=new TreeSet<Integer>();
for(int i=0;i<=a.length-1;i++)
{
tr1.add(a[i]);
tr2.add(b[i]);
}
tr1.retainAll(tr2);
Iterator<Integer> it= tr1.iterator();
while(it.hasNext())
{
System.out.println(it.next());
}}
}

*) "Smart substring"
   Write a function that takes maximum 30 characters from a string but without cutting the words.

   Full description:
   "Featuring stylish rooms and moorings for recreation boats, Room Mate Aitana is a designer hotel built in 2013 on an island in the IJ River in Amsterdam."

   First 30 characters:
   "Featuring stylish rooms and mo"

   Smarter approach (max 30 characters, no words are broken):
   "Featuring stylish rooms and"

Solutions:
   {{
   public String makeSmartString(String str) {
   if (str.length() <= 30) {
   return str;
   }
   String smartStr = str.substring(0, 30);
   for (int i = smartStr.length()-1; i >0; i--) {
   if (smartStr.charAt(i) == ' ') {
   return smartStr.substring(0, i);
   }
   }
   return smartStr;
   }
   }}

*)Given a list/array of names(String) sort them such that each name is followed by a name which
starts with the last character of the previous name.
  # input
  [
  Luis
  Hector
  Selena
  Emmanuel
  Amish
  ]

  # output:
  [
  Emmanuel
  Luis
  Selena
  Amish
  Hector
  ]

  Solutions:
  public class SortArray {

  	public static void main(String[] args) {
  		String[] input = new String[] { "Luis", "Hector", "Selena", "Emmanuel", "Amish", "Pie", "Rat"};
  		String[] result = new String[input.length];
  		Set<Character> set = new HashSet<Character>();
  		Map<Character, String> map = new HashMap<Character, String>();
  		// All start char in set.

  		for (String s : input) {
  			char[] ch = s.toLowerCase().toCharArray();
  			set.add(ch[0]);
  			map.put(ch[ch.length - 1], s);

  		}
  		String lastWord = null;
  		// Trying to find a string whose end char doesn't start a new string.So
  		// that should be last.
  		for (String s : input) {
  			char[] ch = s.toLowerCase().toCharArray();
  			if (!set.contains(ch[ch.length - 1])) {
  				lastWord = s;
  				break;
  			}
  		}

  		result[result.length - 1] = lastWord;

  		for (int i = result.length - 2; i >= 0; i--) {
  			result[i] = map.get(result[i + 1].toLowerCase().toCharArray()[0]);

  		}

  		// Output

  		for (String s : result) {
  			System.out.println(s);
  		}

  	}
  }

*) How do you remove repeated values from a INT array,
returning the resultant array in the same order as original ?

Solutions:
  public static void main(String args[])
  {
  List<Integer> list = new ArrayList<Integer>();

  list.add(new Integer(1));
  list.add(new Integer(2));
  list.add(new Integer(2));
  list.add(new Integer(3));
  list.add(new Integer(3));
  list.add(new Integer(2));
  list.add(new Integer(5));
  list.add(new Integer(4));
  list.add(new Integer(4));

  Set<Integer> withoutRepetition = new HashSet<Integer>();

  List<Integer> finalList = new ArrayList<Integer>();

  for(Integer intNum: list)
  {
  if(!withoutRepetition.contains(intNum))
  {
  withoutRepetition.add(intNum);
  finalList.add(intNum);
  }
  }

  for(Integer intNum: finalList)
  System.out.println(intNum);
  }
  }