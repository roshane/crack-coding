1. Balanced parenthesis

Create function that will determine are the parenthesis balanced in a given string
boolean isBalanced(string)

a(bcd)d => true
(kjds(hfkj)sdhf => false
(sfdsf)(fsfsf => false

{[]}() => true
{[}] => false

2.
Sort the content of the a file based on second field, e.g.

Input file:
Jervie,12,M
Jaimy,11,F
Tony,23,M
Janey,11,F

Output file:
Jaimy,11,F
Janey,11,F
Jervie,12,M
Tony,23,M
donâ€™t worry about open file, close file etc

3.

The "Island Count" Problem

Given a 2D matrix M, filled with either 0s or 1s, count the number of islands of 1s in M.
An island is a group of adjacent values that are all 1s. Every cell in M can be adjacent to the 4 cells that are next to it on the same row or column.

Explain and code the most efficient solution possible and analyze its runtime complexity.

Example: the matrix below has 6 islands:

0 1 0 1 0
0 0 1 1 1
1 0 0 1 0
0 1 1 0 0
1 0 1 0 1

Solutions:
public class IslandCount {

	public static void main(String[] args) {

		int[][] sea = new int[][] {
				new int[] {0,  1,  0,  1,  0},
				new int[] {0,  0,  1,  1,  1},
				new int[] {1,  0,  0,  1,  0},
				new int[] {0,  1,  1,  0,  0},
				new int[] {1,  0,  1,  0,  1} };

		int numOfIslands = IslandCount.countIslands(sea);
		System.out.println("Number of islands is "+numOfIslands);
	}

	public static int countIslands(int[][] sea) {
		boolean[][] checked = new boolean[sea.length][sea.length];
		for (int i = 0; i < sea.length; i++) {
			for (int j = 0; j < sea.length; j++) {
				checked[i][j] = false;
			}
		}
		return countIslands(sea, checked);
	}

	public static int countIslands(int[][] sea, boolean[][] checked) {
		int numOfIslands = 0;
		for (int i = 0; i < sea.length; i++) {
			for (int j = 0; j < sea.length; j++) {
				if (checked[i][j])
					continue;
				if (sea[i][j] == 0) {
					checked[i][j] = true;
					continue;
				}
				numOfIslands++;
				floodFill(i, j, sea, checked);
			}
		}
		return numOfIslands;
	}

	public static void floodFill(int row, int col, int[][] sea, boolean[][] checked) {
		if (sea[row][col] == 0 || checked[row][col]) return;
		checked[row][col] = true;
		if (col < sea.length - 1) floodFill(row, col+1, sea, checked);
		if (row < sea.length - 1) floodFill(row+1, col, sea, checked);
		if (col > 0) floodFill(row, col-1, sea, checked);
		if (row > 0) floodFill(row-1, col, sea, checked);
	}

}
